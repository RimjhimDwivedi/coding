import heapq

def runningMedian(a):
    lowers = []  # Max-heap (we'll store negative values)
    highers = []  # Min-heap
    medians = []

    def add_number(number):
        if not lowers or number <= -lowers[0]:
            heapq.heappush(lowers, -number)
        else:
            heapq.heappush(highers, number)

    def rebalance():
        # Keep heaps balanced or max-heap larger by 1
        if len(lowers) > len(highers) + 1:
            heapq.heappush(highers, -heapq.heappop(lowers))
        elif len(highers) > len(lowers):
            heapq.heappush(lowers, -heapq.heappop(highers))

    def get_median():
        if len(lowers) == len(highers):
            return (-lowers[0] + highers[0]) / 2.0
        else:
            return float(-lowers[0])

    for number in a:
        add_number(number)
        rebalance()
        median = get_median()
        medians.append(median)

    return medians

# Main function: read input, call function, print results
if __name__ == "__main__":
    n = int(input())
    a = [int(input()) for _ in range(n)]
    result = runningMedian(a)
    for med in result:
        print(f"{med:.1f}")
